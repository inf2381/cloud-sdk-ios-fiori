{% macro ParameterBody unwrappedTypeName %}{% if unwrappedTypeName != "Bool" %}_ value: {{ unwrappedTypeName }}{% endif %}{% endmacro %}

{% macro ApplyingParameterBody variable %}{% filter removeNewlines %}
{% if variable|annotated:"param_anon_bool_color" %}
    true, color: value!
{% elif variable|annotated:"param_anon_bool" %}
    true
{% elif variable.typeName.unwrappedTypeName != "Bool" %}
    value!
{% else %}
{% endif %}{% endfilter %}{% endmacro %}

{% macro ModifyingParameterBody variable %}{% filter removeNewlines %}
    {% if variable|annotated:"param_anon_bool_color" %}
        value!
    {% elif variable|annotated:"param_anon_bool" %}

    {% elif variable.typeName.unwrappedTypeName != "Bool" %}
        value!
    {% else %}
    {% endif %}{% endfilter %}{% endmacro %}

{% macro ApplyingStyleBody variable %}
{% set name %}{{variable.name|replace:"_", ""}}{% endset %}
{% if variable|annotated:"return_concrete" %}
        guard value != nil else { return self }
        return self.{{name}}({% call ApplyingParameterBody variable %})
{% elif variable|annotated:"return_some_view" %}
        return Group {
            if value != nil {
                self.{{name}}({% call ApplyingParameterBody variable %})
            } else {
                self
            }
        }
{% endif %}{% endmacro %}

{#/*
    Generates semantic API setters for each style
    e.g.:

    public extension TextStyle {
        func font(_ value: Font) -> TextStyle {
            var new = self
            new._font = value
            return new
        }
    }
*/#}
{% for type in types.implementing._StyleGenerating %}
{% set SwiftUIConcreteViewType %}{{type.name|replace:"Style",""}}{% endset %}
// sourcery:file:Styles/{{type.name}}+Extensions.generated.swift
import SwiftUI

public extension {{type.name }} {
{% for variable in type.variables %}
{% set name %}{{variable.name|replace:"_", ""}}{% endset %}
    func {{name}}({% call ParameterBody variable.typeName.unwrappedTypeName %}) -> {{type.name }} {
        var new = self
        new.{{variable.name}} = {% if variable.typeName.unwrappedTypeName == "Bool" %}true{% else %}value{% endif %}
        return new
    }
{% endfor %}
}

{#/*
    Generates the `apply` method, which invokes each of the private `_apply(...)` methods
*/#}
public extension {{SwiftUIConcreteViewType}} {
    func applying(_ style: {{type.name|upperFirstLetter}}) -> some View {
        let {{SwiftUIConcreteViewType|lowercase}} = self
    {% for variable in type.variables|annotated:"return_concrete" %}
    {% set name %}{{variable.name|replace:"_", ""}}{% endset %}
            ._apply{{name|upperFirstLetter}}(style.{{variable.name}})
    {% endfor %}
        let someView = {{SwiftUIConcreteViewType|lowercase}}
    {% for variable in type.variables|annotated:"return_some_view" %}
    {% set name %}{{variable.name|replace:"_", ""}}{% endset %}
            ._apply{{name|upperFirstLetter}}(style.{{variable.name}})
    {% endfor %}
        return someView
    }
}
{#/*
    Generates private API for applying attributes of the Style to the concrete View type
    // accounts for nil values
    e.g.:

    fileprivate extension Text {
        func _applyFontWeight(_ value: Font.Weight?) -> Text {
            guard value != nil else { return self }
            return self.fontWeight(value!)
        }
*/#}

fileprivate extension {{SwiftUIConcreteViewType}} {
    {% for variable in type.variables|annotated:"return_concrete" %}
    {% set name %}{{variable.name|replace:"_", ""}}{% endset %}

    func _apply{{name|upperFirstLetter}}(_ value: {{variable.typeName}}) -> {{SwiftUIConcreteViewType}} {
        {% call ApplyingStyleBody variable %}
    }
    {% endfor %}
}

{#/*
    Generates private API for applying attributes of the Style to `some View`
    // accounts for nil values
    e.g.:

    fileprivate extension View {
        func _applyFont(_ value: Font?) -> some View {
            return Group {
                if value != nil {
                    self.font(value!)
                } else {
                    self
                }
            }
        }
*/#}
fileprivate extension View {
    {% for variable in type.variables|annotated:"return_some_view" %}
    {% set name %}{{variable.name|replace:"_", ""}}{% endset %}

    func _apply{{name|upperFirstLetter}}(_ value: {{variable.typeName}}) -> some View {
        {% call ApplyingStyleBody variable %}
    }
    {% endfor %}
}

{#/*
    Generates the `apply` method, which invokes each of the private `_apply(...)` methods
*/#}
public extension {{type.name}} {
    func merging(_ style: {{type.name|upperFirstLetter}}) -> {{type.name}} {
        var new = self
    {% for variable in type.variables %}
        if let value = style.{{variable.name}} { 
            new.{{variable.name}} = value 
        }
    {% endfor %}
        return new
    }
}
// sourcery:end
{% endfor %}